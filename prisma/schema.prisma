datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UsStock {
  id                String  @id @default(cuid())
  code              String
  getPrice          Float
  quantity          Int
  sector            String
  usdjpy            Float
  isNoTax           Boolean @default(false)
  userId            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
}

model JapanStock {
  id                String  @id @default(cuid())
  code              String
  name              String @default("")
  getPrice          Float
  quantity          Int
  dividends          Float @default(0)
  sector            String
  isNoTax           Boolean @default(false)
  userId            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
}

model JapanFund {
  id                String  @id @default(cuid())
  name              String
  code              String
  getPriceTotal     Float
  getPrice          Float
  userId            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
}

model Crypto {
  id                String  @id @default(cuid())
  code              String
  getPrice          Float
  quantity          Float
  userId            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
}

model FixedIncomeAsset {
  id                String  @id @default(cuid())
  code              String
  getPriceTotal     Float
  dividendRate      Float
  usdjpy            Float
  paymentMonth      Int[]
  userId            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
}

model JapanFundPrice {
  id                String  @id @default(cuid())
  name              String
  code              String
  price             Float
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Cash {
  id                String  @id @default(cuid())
  name              String
  price             Float
  sector            String
  userId            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
}

model AssetHistory {
  id                String  @id @default(cuid())
  stock             Float
  fund              Float
  crypto            Float
  fixedIncomeAsset  Float
  cash              Float
  userId            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId,createdAt])
}